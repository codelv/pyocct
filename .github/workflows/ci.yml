name: Workflow
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  release:
    types: [published]

jobs:
  generate_linux:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Generate (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
    steps:

      - name: "Install OpenGL"
        run: |
          sudo apt-get update
          sudo apt-get -q -y install libglu1-mesa-dev libgl1-mesa-dev libxi-dev libglfw3-dev libgles2-mesa-dev

      - name: "Prepare VM"
        run: sudo rm -Rf /home/linuxbrew/

      - name: "Clone pyOCCT"
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: "Create env"
        uses: mamba-org/setup-micromamba@v2
        with:
            environment-file: binder/environment.yml
            cache-environment: true

      - name: "Generate bindings"
        shell: micromamba-shell {0}
        run: python binder/run.py -c binder/config.txt -o src

      - name: "Upload bindings"
        uses: actions/upload-artifact@v4
        with:
          name: pyocct_src_${{ matrix.os }}
          path: src

  generate_win:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Generate (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest']
    steps:
      - name: "Clone pyOCCT"
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: "Create env"
        uses: mamba-org/setup-micromamba@v2
        with:
            environment-file: binder/environment.yml
            cache-environment: true

      - name: "Generate bindings"
        shell: bash -l {0}
        run: |
          set CONDA_DLL_SEARCH_MODIFICATION_ENABLE=1
          python binder/run.py -c binder/config.txt -o src

      - name: "Upload bindings"
        uses: actions/upload-artifact@v4
        with:
          name: pyocct_src_${{ matrix.os }}
          path: src

  build_linux:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Build (${{ matrix.python-version }}, ${{ matrix.os }})
    needs: generate_linux
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.12', '3.13']
    steps:

      - name: "Install OpenGL"
        run: |
          sudo apt-get update
          sudo apt-get -q -y install libglu1-mesa-dev libgl1-mesa-dev libxi-dev libglfw3-dev libgles2-mesa-dev

      - name: "Prepare VM"
        run: |
            sudo rm -Rf /home/linuxbrew/
            echo "$CONDA/bin" >> $GITHUB_PATH

      - name: "Clone pyOCCT"
        uses: actions/checkout@v3

      - name: "Download binding sources"
        uses: actions/download-artifact@v4
        with:
          name: pyocct_src_${{ matrix.os }}
          path: src

      - name: "Create build env"
        uses: mamba-org/setup-micromamba@v2
        with:
            environment-file: environment.yml
            cache-environment: true
      - name: "Run conda build"
        shell: micromamba-shell {0}
        run: boa build ci --python ${{ matrix.python-version }}

      - name: "Upload conda package"
        uses: actions/upload-artifact@v4
        with:
          name: pyocct-py${{ matrix.python-version }}_${{ matrix.os }}
          path: ~/micromamba/envs/pyocct/conda-bld/linux-64

  build_win:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Build (${{ matrix.python-version }}, ${{ matrix.os }})
    needs: generate_win
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest']
        python-version: ['3.12', '3.13']
    steps:

      - name: "Clone pyOCCT"
        uses: actions/checkout@v3

      - name: "Download binding sources"
        uses: actions/download-artifact@v4
        with:
          name: pyocct_src_${{ matrix.os }}
          path: src

      - name: "Prepare VM"
        shell: bash -l {0}
        run: |
          rm -Rf C:/ProgramData/chocolatey/
          rm -Rf C:/Program Files/LLVM

      - name: "Create build env"
        uses: mamba-org/setup-micromamba@v2
        with:
            environment-file: environment.yml
            cache-environment: true

      - name: "Run conda build"
        shell: bash -l {0}
        run: |
            mkdir output
            boa build ci --python ${{ matrix.python-version }} --output-folder output

      - name: "Upload conda package"
        uses: actions/upload-artifact@v4
        with:
          name: pyocct-py${{ matrix.python-version }}_${{ matrix.os }}
          path: output
